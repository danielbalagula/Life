{"version":3,"sources":["middleware/purchase.get.validation.js"],"names":["buildCheckFunction","validator","validationResult","buildSanitizeFunction","sanitizer","sanitize","check","module","exports","customSanitizer","category","toLowerCase","Math","floor","max","startDate","currentHour","Date","getTime","min","endDate","optional","toFloat","isFloat","withMessage","custom","isString","isAscii","trim","isLength","isIn","categories","map","charAt","toUpperCase","slice","cost","toFixed","toBoolean","isBoolean","toInt","isInt","req","res","next","results","formatWith","formatter","isEmpty","status","array"],"mappings":"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","file":"../../middleware/purchase.get.validation.js","sourcesContent":["import validator  from 'express-validator/check';\nimport sanitizer  from 'express-validator/filter';\nimport categories from './../models/purchase/categories';\nimport formatter  from './express.validator.formatter';\n\nconst { buildCheckFunction, validationResult }  = validator;\nconst { buildSanitizeFunction }                 = sanitizer;\nconst sanitize                                  = buildSanitizeFunction(['query']);\nconst check                                     = buildCheckFunction(['query']);\n\nmodule.exports = [\n    sanitize('category')\n        .customSanitizer(category => {\n            return category.toLowerCase();\n        }),\n    sanitize('startDate')\n        .customSanitizer(startDate => {\n            return Math.floor( Math.max(0, startDate / (1000 * 3600)) );\n        }),\n    sanitize('endDate')\n        .customSanitizer(endDate => {\n            let currentHour = new Date().getTime() / (1000 * 3600);\n            return Math.floor( Math.min(currentHour, endDate / (1000 * 3600)) );\n        }),\n    check('startDate')\n        .optional()\n        .toFloat()\n        .isFloat().withMessage('Start date should be positive in milliseconds (i.e. Date.now())')\n        .custom(startDate => {\n            let currentHour = new Date().getTime() / (1000 * 3600);\n            return currentHour >= startDate;\n        }).withMessage('Start date can\\'t be greater than current date'),\n    check('endDate')\n        .optional()\n        .toFloat()\n        .isFloat({min: 0}).withMessage('End date should be positive in milliseconds (i.e. Date.now())')\n        .custom(endDate => {\n            let currentHour = new Date().getTime() / (1000 * 3600);\n            return currentHour >= endDate;\n        }).withMessage('End date can\\'t be greater than current date'),\n    check('name')\n        .optional()\n        .isString('Name should be a string')\n        .isAscii().withMessage('Name should be Ascii')\n        .trim()\n        .isLength({min: 3, max: 16}).withMessage('Name should be 3 to 16 characters'),\n    check('category')\n        .optional()\n        .isString('Category should be a string')\n        .isAscii().withMessage('Establishment should be Ascii')\n        .trim()\n        .isIn(categories).withMessage(`Category should be one of${categories.map(category => ' ' + category.charAt(0).toUpperCase() + category.slice(1))}`),\n    check('establishment')\n        .optional()\n        .isString('Establishment should be a string')\n        .isAscii().withMessage('Establishment should be Ascii')\n        .trim()\n        .isLength({min: 3, max: 16}).withMessage('Establishment should be 3 to 16 characters'),\n    check('cost')\n        .optional()\n        .toFloat()\n        .isFloat().withMessage('Cost needs to be numeric'),\n    sanitize('cost', cost => {\n        return cost.toFixed(2);\n    }),\n    check('luxury')\n        .optional()\n        .toBoolean()\n        .isBoolean().withMessage('Luxury should be either true or false'),\n    check('subscription')\n        .optional()\n        .toInt()\n        .isInt({min: 1, max: 365}).withMessage('Subscription of purchase should indicate every \\'X\\' days it repeats between 1 and 365'),\n    (req, res, next) => { \n        const results = validationResult(req).formatWith(formatter);\n        if (!results.isEmpty()) {\n            res.status(422);\n            next(results.array());\n        }\n        next();\n    }\n];"]}