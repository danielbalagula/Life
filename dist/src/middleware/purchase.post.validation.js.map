{"version":3,"sources":["middleware/purchase.post.validation.js"],"names":["buildCheckFunction","validator","validationResult","buildSanitizeFunction","sanitizer","sanitize","check","module","exports","customSanitizer","category","toLowerCase","Math","floor","datePurchased","optional","toFloat","isFloat","withMessage","custom","currentHour","Date","getTime","exists","isString","isAscii","trim","isLength","min","max","isIn","categories","map","charAt","toUpperCase","slice","cost","toFixed","toBoolean","isBoolean","toInt","isInt","req","res","next","results","formatWith","formatter","isEmpty","status","array"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,kB,GAA0CC,e,CAA1CD,kB;IAAoBE,gB,GAAsBD,e,CAAtBC,gB;IACpBC,qB,GAA0CC,gB,CAA1CD,qB;;AACR,IAAME,WAA4CF,sBAAsB,CAAC,MAAD,CAAtB,CAAlD;AACA,IAAMG,QAA4CN,mBAAmB,CAAC,MAAD,CAAnB,CAAlD;;AAEAO,OAAOC,OAAP,GAAiB,CACbH,SAAS,UAAT,EACKI,eADL,CACqB,oBAAY;AACzB,WAAOC,SAASC,WAAT,EAAP;AACH,CAHL,CADa,EAKbN,SAAS,eAAT,EACKI,eADL,CACqB,yBAAiB;AAC9B,WAAOG,KAAKC,KAAL,CAAWC,iBAAiB,OAAO,IAAxB,CAAX,CAAP;AACH,CAHL,CALa,EASbR,MAAM,eAAN,EACKS,QADL,GAEKC,OAFL,GAGKC,OAHL,GAGeC,WAHf,CAG2B,kDAH3B,EAIKC,MAJL,CAIY,yBAAiB;AACrB,QAAIC,cAAc,IAAIC,IAAJ,GAAWC,OAAX,MAAwB,OAAO,IAA/B,CAAlB;AACA,WAAOF,eAAeN,aAAtB;AACH,CAPL,EAOOI,WAPP,CAOmB,mDAPnB,EAQKC,MARL,CAQY,yBAAiB;AACrB,QAAIC,cAAc,IAAIC,IAAJ,GAAWC,OAAX,MAAwB,OAAO,IAA/B,CAAlB;AACA,WAAOF,eAAeN,gBAAiB,WAAW,IAAlD;AACH,CAXL,EAWOI,WAXP,CAWmB,uDAXnB,CATa,EAqBbZ,MAAM,MAAN,EACKiB,MADL,GACcL,WADd,CAC0B,2BAD1B,EAEKM,QAFL,CAEc,yBAFd,EAGKC,OAHL,GAGeP,WAHf,CAG2B,sBAH3B,EAIKQ,IAJL,GAKKC,QALL,CAKc,EAACC,KAAK,CAAN,EAASC,KAAK,EAAd,EALd,EAKiCX,WALjC,CAK6C,mCAL7C,CArBa,EA2BbZ,MAAM,UAAN,EACKiB,MADL,GACcL,WADd,CAC0B,+BAD1B,EAEKM,QAFL,CAEc,6BAFd,EAGKC,OAHL,GAGeP,WAHf,CAG2B,+BAH3B,EAIKQ,IAJL,GAKKI,IALL,CAKUC,oBALV,EAKsBb,WALtB,+BAK8Da,qBAAWC,GAAX,CAAe;AAAA,WAAY,MAAMtB,SAASuB,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,EAAN,GAAyCxB,SAASyB,KAAT,CAAe,CAAf,CAArD;AAAA,CAAf,CAL9D,CA3Ba,EAiCb7B,MAAM,eAAN,EACKiB,MADL,GACcL,WADd,CAC0B,oCAD1B,EAEKM,QAFL,CAEc,kCAFd,EAGKC,OAHL,GAGeP,WAHf,CAG2B,+BAH3B,EAIKQ,IAJL,GAKKC,QALL,CAKc,EAACC,KAAK,CAAN,EAASC,KAAK,EAAd,EALd,EAKiCX,WALjC,CAK6C,4CAL7C,CAjCa,EAuCbZ,MAAM,MAAN,EACKiB,MADL,GACcL,WADd,CAC0B,4BAD1B,EAEKF,OAFL,GAGKC,OAHL,GAGeC,WAHf,CAG2B,0BAH3B,CAvCa,EA2Cbb,SAAS,MAAT,EAAiB,gBAAQ;AACrB,WAAO+B,KAAKC,OAAL,CAAa,CAAb,CAAP;AACH,CAFD,CA3Ca,EA8Cb/B,MAAM,QAAN,EACKS,QADL,GAEKuB,SAFL,GAGKC,SAHL,GAGiBrB,WAHjB,CAG6B,uCAH7B,CA9Ca,EAkDbZ,MAAM,cAAN,EACKS,QADL,GAEKyB,KAFL,GAGKC,KAHL,CAGW,EAACb,KAAK,CAAN,EAASC,KAAK,GAAd,EAHX,EAG+BX,WAH/B,CAG2C,wFAH3C,CAlDa,EAsDb,UAACwB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChB,QAAMC,UAAU3C,iBAAiBwC,GAAjB,EAAsBI,UAAtB,CAAiCC,0BAAjC,CAAhB;AACA,QAAI,CAACF,QAAQG,OAAR,EAAL,EAAwB;AACpBL,YAAIM,MAAJ,CAAW,GAAX;AACAL,aAAKC,QAAQK,KAAR,EAAL;AACH;AACDN;AACH,CA7DY,CAAjB","file":"../../middleware/purchase.post.validation.js","sourcesContent":["import validator  from 'express-validator/check';\nimport sanitizer  from 'express-validator/filter';\nimport categories from './../models/purchase/categories';\nimport formatter  from './express.validator.formatter';\n\nconst { buildCheckFunction, validationResult }  = validator;\nconst { buildSanitizeFunction }                 = sanitizer;\nconst sanitize                                  = buildSanitizeFunction(['body']);\nconst check                                     = buildCheckFunction(['body']);\n\nmodule.exports = [\n    sanitize('category')\n        .customSanitizer(category => {\n            return category.toLowerCase();\n        }),\n    sanitize('datePurchased')\n        .customSanitizer(datePurchased => {\n            return Math.floor(datePurchased / (1000 * 3600));\n        }),\n    check('datePurchased')\n        .optional()\n        .toFloat()\n        .isFloat().withMessage('Date should be in milliseconds (i.e. Date.now())')\n        .custom(datePurchased => {\n            let currentHour = new Date().getTime() / (1000 * 3600);\n            return currentHour >= datePurchased;\n        }).withMessage('Purchase date can\\'t be greater than current date')\n        .custom(datePurchased => {\n            let currentHour = new Date().getTime() / (1000 * 3600);\n            return currentHour <= datePurchased + (31622400 / 3600);\n        }).withMessage('Purchase date must be within one year of current date'),\n    check('name')\n        .exists().withMessage('Name of purchase required')\n        .isString('Name should be a string')\n        .isAscii().withMessage('Name should be Ascii')\n        .trim()\n        .isLength({min: 3, max: 16}).withMessage('Name should be 3 to 16 characters'),\n    check('category')\n        .exists().withMessage('Category of purchase required')\n        .isString('Category should be a string')\n        .isAscii().withMessage('Establishment should be Ascii')\n        .trim()\n        .isIn(categories).withMessage(`Category should be one of${categories.map(category => ' ' + category.charAt(0).toUpperCase() + category.slice(1))}`),\n    check('establishment')\n        .exists().withMessage('Establishment of purchase required')\n        .isString('Establishment should be a string')\n        .isAscii().withMessage('Establishment should be Ascii')\n        .trim()\n        .isLength({min: 3, max: 16}).withMessage('Establishment should be 3 to 16 characters'),\n    check('cost')\n        .exists().withMessage('Cost of purchased required')\n        .toFloat()\n        .isFloat().withMessage('Cost needs to be numeric'),\n    sanitize('cost', cost => {\n        return cost.toFixed(2);\n    }),\n    check('luxury')\n        .optional()\n        .toBoolean()\n        .isBoolean().withMessage('Luxury should be either true or false'),\n    check('subscription')\n        .optional()\n        .toInt()\n        .isInt({min: 1, max: 365}).withMessage('Subscription of purchase should indicate every \\'X\\' days it repeats between 1 and 365'),\n    (req, res, next) => { \n        const results = validationResult(req).formatWith(formatter);\n        if (!results.isEmpty()) {\n            res.status(422);\n            next(results.array())\n        }\n        next();\n    }\n];"]}