{"version":3,"sources":["config/passport.js"],"names":["LocalStrategy","passportLocal","Strategy","authLogger","passport","serializeUser","user","done","id","deserializeUser","User","findById","err","password","use","usernameField","passwordField","email","findOne","toLowerCase","findErr","msg","isValidPassword","validPassErr","isMatch","exports","isAuthenticated","req","res","next","status"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,gBAAgBC,wBAAcC,QAApC;AACA,IAAMC,aAAa,qBAAM,OAAN,CAAnB;;AAEAC,mBAASC,aAAT,CAAuB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACnCA,SAAK,IAAL,EAAWD,KAAKE,EAAhB;AACH,CAFD;;AAIAJ,mBAASK,eAAT;AAAA,wFAA0B,iBAAOD,EAAP,EAAWD,IAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACE,yBAAGG,eAAKC,QAAL,CAAcH,EAAd,CAAH,CADF;;AAAA;AAAA;AAAA;AACjBI,2BADiB;AACZN,4BADY;;AAEtB,+BAAOA,KAAKO,QAAZ;AACAN,6BAAKK,GAAL,EAAUN,IAAV;;AAHsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1B;;AAAA;AAAA;AAAA;AAAA;;AAMAF,mBAASU,GAAT,CAAa,IAAId,aAAJ,CAAkB;AAC3Be,mBAAe,OADY;AAE3BC,mBAAe;AAFY,CAAlB;AAAA,yFAIT,kBAAOC,KAAP,EAAcJ,QAAd,EAAwBN,IAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACgC,yBAAGG,eAAKQ,OAAL,CAAa,EAACD,OAAOA,MAAME,WAAN,EAAR,EAAb,CAAH,CADhC;;AAAA;AAAA;AAAA;AACSC,+BADT;AACkBd,4BADlB;;AAAA,6BAEQc,OAFR;AAAA;AAAA;AAAA;;AAAA,0DAEwBb,KAAKa,OAAL,CAFxB;;AAAA;AAAA,4BAGSd,IAHT;AAAA;AAAA;AAAA;;AAAA,0DAGsBC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAACc,gBAAcJ,KAAd,eAAD,EAAlB,CAHtB;;AAAA;AAAA;AAAA,+BAKwC,yBAAGX,KAAKgB,eAAL,CAAqBT,QAArB,CAAH,CALxC;;AAAA;AAAA;AAAA;AAKSU,oCALT;AAKuBC,+BALvB;;AAAA,6BAMQD,YANR;AAAA;AAAA;AAAA;;AAAA,0DAM6BhB,KAAKgB,YAAL,CAN7B;;AAAA;AAAA,6BAOQC,OAPR;AAAA;AAAA;AAAA;;AAAA,0DAOwBjB,KAAK,IAAL,EAAWD,IAAX,CAPxB;;AAAA;AAAA,0DASWC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAACc,KAAK,4BAAN,EAAlB,CATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJS;;AAAA;AAAA;AAAA;AAAA,IAAb;;AAiBAI,QAAQC,eAAR,GAA0B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1C,QAAIF,IAAID,eAAJ,EAAJ,EAA2B;AACvBvB,yBAAewB,IAAInB,EAAnB,UAA0BmB,IAAIrB,IAAJ,CAASW,KAAnC;AACA,eAAOY,MAAP;AACH;AACDD,QAAIE,MAAJ,CAAW,GAAX;AACA,WAAOD,KAAK,mBAAL,CAAP;AACH,CAPD","file":"../../config/passport.js","sourcesContent":["import passport      from 'passport';\nimport passportLocal from 'passport-local';\nimport debug         from 'debug';\nimport to            from 'await-to-js';\nimport User          from '../models/users/User';\n\nconst LocalStrategy = passportLocal.Strategy;\nconst authLogger = debug('auth_');\n\npassport.serializeUser((user, done) => {\n    done(null, user.id);\n});\n\npassport.deserializeUser( async (id, done) => {\n    let [err, user] = await to(User.findById(id));\n    delete user.password;\n    done(err, user);\n});\n\npassport.use(new LocalStrategy({ \n    usernameField: 'email',\n    passwordField: 'password'    \n    },\n    async (email, password, done) => {\n        let [findErr, user] = await to(User.findOne({email: email.toLowerCase()}));\n        if (findErr) return done(findErr);\n        if (!user) return done(null, false, {msg: `Email ${email} not found`});\n        \n        let [validPassErr, isMatch] = await to(user.isValidPassword(password));\n        if (validPassErr) return done(validPassErr);\n        if (isMatch) return done(null, user);\n        \n        return done(null, false, {msg: 'Invalid e-mail or password'});\n    }\n));\n\nexports.isAuthenticated = (req, res, next) => {\n    if (req.isAuthenticated()) {\n        authLogger(`[${req.id}] ${req.user.email} is authenticated`);\n        return next();\n    }\n    res.status(401);\n    return next('Must be logged in');\n};"]}