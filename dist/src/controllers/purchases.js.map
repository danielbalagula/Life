{"version":3,"sources":["controllers/purchases.js"],"names":["purchasesRouter","express","Router","purchasesLogger","get","isAuthenticated","getPurchasesValidator","req","res","next","query","startDate","endDate","params","datePurchased","$gte","$lt","Date","getTime","$in","user","purchases","Purchase","find","findErr","result","status","id","email","length","send","post","postPurchasesValidator","newPurchaseId","shortid","generate","newPurchase","body","_id","all","save","User","findOneAndUpdate","$addToSet","then","savedPurchase","updatedUser","catch","err","deleteOne","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAIA,kBAAkBC,kBAAQC,MAAR,EAAtB;;AAEA,IAAIC,kBAAkB,qBAAM,YAAN,CAAtB;;AAEAH,gBAAgBI,GAAhB,CAAoB,GAApB,EAAyBC,yBAAzB,EAA0CC,qBAA1C;AAAA,wFAAiE,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCACvBF,IAAIG,KADmB,EACxDC,SADwD,cACxDA,SADwD,EAC7CC,OAD6C,cAC7CA,OAD6C,EACjCC,MADiC;AAEzDH,6BAFyD,8BAGtDG,MAHsD,EAItD;AACCC,2CAAe;AACXC,sCAAOJ,aAAa,CADT;AAEXK,qCAAMJ,WAAW,IAAIK,IAAJ,GAAWC,OAAX,MAAwB,OAAO,IAA/B;AAFN;AADhB,yBAJsD,EAUtD;AACC,mCAAO,EAAEC,KAAKZ,IAAIa,IAAJ,CAASC,SAAhB;AADR,yBAVsD;AAAA;AAAA,+BAc/B,yBAAGC,mBAASC,IAAT,CAAcb,KAAd,CAAH,CAd+B;;AAAA;AAAA;AAAA;AAcxDc,+BAdwD;AAc/CC,8BAd+C;;;AAgB7D,4BAAID,OAAJ,EAAa;AACThB,gCAAIkB,MAAJ,CAAW,GAAX;AACAjB,iCAAK,8CAAL;AACH;AACDN,8CAAoBI,IAAIoB,EAAxB,UAA+BpB,IAAIa,IAAJ,CAASQ,KAAxC,mBAA2DH,OAAOI,MAAlE;AACArB,4BAAIkB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBL,MAArB;;AArB6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjE;;AAAA;AAAA;AAAA;AAAA;;AAwBAzB,gBAAgB+B,IAAhB,CAAqB,GAArB,EAA0B1B,yBAA1B,EAA2C2B,sBAA3C;AAAA,yFAAmE,kBAAMzB,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3DwB,qCAD2D,GAC3CC,kBAAQC,QAAR,EAD2C;AAE3DC,mCAF2D,GAE7C,IAAId,kBAAJ,4BACXf,IAAI8B,IADO,EAEX;AACCC,iCAAKL;AADN,yBAFW,EAF6C;;;AAS/D,0CAAQM,GAAR,CAAY,CAACH,YAAYI,IAAZ,EAAD,EAAqBC,eAAKC,gBAAL,CAAsB,EAACJ,KAAK/B,IAAIa,IAAJ,CAASO,EAAf,EAAtB,EAA0C;AACvEgB,uCAAW;AACPtB,2CAAWY;AADJ;AAD4D,yBAA1C,CAArB,CAAZ,EAIKW,IAJL,CAIU,iBAAkC;AAAA;AAAA,gCAAhCC,aAAgC;AAAA,gCAAjBC,WAAiB;;AACxC3C,kDAAoBI,IAAIoB,EAAxB,UAA+BmB,YAAYlB,KAA3C,+BAA0EiB,cAAcP,GAAxF;AACA9B,gCAAIkB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,wBAA0CvB,IAAIa,IAAJ,CAASQ,KAAnD;AACH,yBAPD,EAOGmB,KAPH,CAOS,UAACC,GAAD,EAAS;AACdvC,iCAAKuC,GAAL;AACA1B,+CAAS2B,SAAT,CAAmB,EAACX,KAAKL,aAAN,EAAnB;AACH,yBAVD;;AAT+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnE;;AAAA;AAAA;AAAA;AAAA;;AAsBAiB,OAAOC,OAAP,GAAiBnD,eAAjB","file":"../../controllers/purchases.js","sourcesContent":["import express                    from 'express';\nimport to                         from 'await-to-js';\nimport shortid                    from 'shortid';\nimport debug                      from 'debug';\n\nimport Purchase                   from '../models/purchase/Purchase';\nimport User                       from '../models/users/User';\nimport { isAuthenticated }        from '../config/passport';\nimport postPurchasesValidator     from '../middleware/purchase.post.validation';\nimport getPurchasesValidator      from '../middleware/purchase.get.validation';\n\nlet purchasesRouter = express.Router();\n\nlet purchasesLogger = debug('purchases_');\n\npurchasesRouter.get('/', isAuthenticated, getPurchasesValidator, async (req, res, next) => {\n    let {startDate, endDate, ...params} = req.query;\n    let query = {\n        ...params,\n        ...{\n            datePurchased: {\n                $gte: (startDate || 0),\n                $lt: (endDate || new Date().getTime() / (1000 * 3600))\n            }\n        },\n        ...{\n            '_id': { $in: req.user.purchases }\n        }\n    };\n    let [findErr, result] = await to(Purchase.find(query));\n    \n    if (findErr) {\n        res.status(500);\n        next('Internal server error retrieving purchase(s)');\n    }\n    purchasesLogger(`[${req.id}] ${req.user.email} retrieved ${result.length} products`);\n    res.status(200).send(result);\n});\n\npurchasesRouter.post('/', isAuthenticated, postPurchasesValidator, async(req, res, next) => {\n    let newPurchaseId = shortid.generate();\n    let newPurchase = new Purchase({\n        ...req.body,\n        ...{\n            _id: newPurchaseId\n        }\n    });\n    \n    Promise.all([newPurchase.save(), User.findOneAndUpdate({_id: req.user.id}, {\n        $addToSet: {\n            purchases: newPurchaseId\n        }\n    })]).then(([savedPurchase, updatedUser]) => {\n        purchasesLogger(`[${req.id}] ${updatedUser.email} added product with id ${savedPurchase._id}`)\n        res.status(201).send(`Added product for ${req.user.email}`);\n    }).catch((err) => {\n        next(err)\n        Purchase.deleteOne({_id: newPurchaseId});\n    })\n});\n\nmodule.exports = purchasesRouter;\n"]}