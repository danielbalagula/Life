{"version":3,"sources":["controllers/users.js"],"names":["usersLogger","usersRouter","express","Router","post","registerValidator","req","res","next","user","status","newUser","User","email","body","password","generateHash","findOne","findErr","existingUser","save","saveErr","savedUser","logIn","loginErr","id","send","loginValidator","passport","authenticate","authErr","info","get","logout","session","destroy","err","module","exports"],"mappings":"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","file":"../../controllers/users.js","sourcesContent":["import express              from 'express';\nimport passport             from 'passport';\nimport to                   from 'await-to-js';\nimport debug                from 'debug';\n\nimport User                 from  '../models/users/User';\nimport loginValidator       from '../middleware/login.post.validation';\nimport registerValidator    from '../middleware/register.post.validation';\n\nconst usersLogger = debug('users_');\n\nlet usersRouter = express.Router();\n\nusersRouter.post('/register', registerValidator, async (req, res, next) => {\n    if (req.user) {\n        res.status(400);\n        return next('Already logged in');\n    }\n    const newUser = new User({\n        email: req.body.email,\n        password: User.generateHash(req.body.password)\n    });\n    let [findErr, existingUser] = await to(User.findOne({email: req.body.email}));\n    if (findErr) return next(findErr);\n    if (existingUser) {\n        res.status(409);\n        return next('Username already taken');\n    }\n    let [saveErr, savedUser] = await to(newUser.save());\n    if (saveErr) return next(saveErr);\n    \n    req.logIn(savedUser, loginErr => {\n        if (loginErr) return next(loginErr);\n        usersLogger(`[${req.id}] ${savedUser.email} successfully registered`);\n        return res.status(201).send('Successfully registered');\n    }); \n});\n\nusersRouter.post('/login', loginValidator, (req, res, next) => {\n    if (req.user) {\n        res.status(400);\n        return next('Already logged in');\n    }\n    passport.authenticate('local', (authErr, user, info) => {\n        if (authErr) return next(authErr);\n        if (!user) return res.send(info);\n\n        req.logIn(user, loginErr => {\n            if (loginErr) return next(loginErr);\n            usersLogger(`[${req.id}] ${user.email} successfully logged in`);\n            return res.send(user);\n        }); \n    })(req, res, next);\n});\n\nusersRouter.get('/logout', (req, res, next) => {\n    if (!req.user) {\n        res.status(422);\n        return next('Not logged in');\n    }\n    let user = req.user;\n    req.logout();\n    req.session.destroy(err => {\n        if (err) usersLogger(`Error destroying ${user.email}\\'s session: ${err}`);\n        usersLogger(`[${req.id}] ${user.email} successfully logged out`);\n        req.user = null;\n        return res.status(200).send('Successfully logged out')\n    });\n});\n\nmodule.exports = usersRouter;\n"]}